# For a list of key names, see: GLFW keys
# <http://www.glfw.org/docs/latest/group__keys.html>. The name to use
# is the part after the GLFW_KEY_ prefix. For a list of modifier
# names, see: GLFW mods
# <http://www.glfw.org/docs/latest/group__mods.html>

# On Linux you can also use XKB key names to bind keys that are not
# supported by GLFW. See XKB keys
# <https://github.com/xkbcommon/libxkbcommon/blob/master/xkbcommon/xkbcommon-keysyms.h> for a list of key names. The name to use is the part
# after the XKB_KEY_ prefix. Note that you should only use an XKB key
# name for keys that are not present in the list of GLFW keys.

# You can use the special action no_op to unmap a keyboard shortcut
# that is assigned in the default configuration.

# You can combine multiple actions to be triggered by a single
# shortcut, using the syntax below::

#     map key combine <separator> action1 <separator> action2 <separator> action3 ...

# For example::

#     map kitty_mod+e combine : new_window : next_layout

# this will create a new window and switch to the next available
# layout

# You can use multi-key shortcuts using the syntax shown below::

#     map key1>key2>key3 action

# For example::

#     map ctrl+f>2 set_font_size 20

kitty_mod ctrl+shift

# The value of kitty_mod is used as the modifier for all default
# shortcuts, you can change it in your kitty.conf to change the
# modifiers for all the default shortcuts.

clear_all_shortcuts no

# You can have kitty remove all shortcut definition seen up to this
# point. Useful, for instance, to remove the default shortcuts.

# Clipboard {{{

map kitty_mod+c  copy_to_clipboard
map kitty_mod+v  paste_from_clipboard
map kitty_mod+s  paste_from_selection
map shift+insert paste_from_selection
map kitty_mod+o  pass_selection_to_program

# You can also pass the contents of the current selection to any
# program using pass_selection_to_program. By default, the system's
# open program is used, but you can specify your own, for example::

#     map kitty_mod+o pass_selection_to_program firefox

# You can pass the current selection to a terminal program running in
# a new kitty window, by using the @selection placeholder::

#     map kitty_mod+y new_window less @selection

# }}}

# Scrolling {{{

map kitty_mod+up        scroll_line_up
map kitty_mod+k         scroll_line_up
map kitty_mod+down      scroll_line_down
map kitty_mod+j         scroll_line_down
map kitty_mod+page_up   scroll_page_up
map kitty_mod+page_down scroll_page_down
map kitty_mod+home      scroll_home
map kitty_mod+end       scroll_end
map kitty_mod+h         show_scrollback

# You can send the contents of the current screen + history buffer as
# stdin to an arbitrary program using the placeholders @text (which
# is the plain text) and @ansi (which includes text styling escape
# codes). For only the current screen, use @screen or @ansi_screen.
# For example, the following command opens the scrollback buffer in
# less in a new window::

#     map kitty_mod+y new_window @ansi less +G -R

# }}}

# Window management {{{

map kitty_mod+f11 new_window

# You can open a new window running an arbitrary program, for
# example::

#     map kitty_mod+y      new_window mutt

# You can open a new window with the current working directory set to
# the working directory of the current window using::

#     map ctrl+alt+enter    new_window_with_cwd

map kitty_mod+n new_os_window
map kitty_mod+w close_window
map kitty_mod+] next_window
map kitty_mod+[ previous_window
map kitty_mod+f move_window_forward
map kitty_mod+b move_window_backward
map kitty_mod+` move_window_to_top
map kitty_mod+r start_resizing_window
map kitty_mod+1 first_window
map kitty_mod+2 second_window
map kitty_mod+3 third_window
map kitty_mod+4 fourth_window
map kitty_mod+5 fifth_window
map kitty_mod+6 sixth_window
map kitty_mod+7 seventh_window
map kitty_mod+8 eighth_window
map kitty_mod+9 ninth_window
map kitty_mod+0 tenth_window
# }}}

# Tab management {{{

map kitty_mod+right next_tab
map kitty_mod+left  previous_tab
map kitty_mod+t     new_tab
map kitty_mod+q     close_tab
map kitty_mod+.     move_tab_forward
map kitty_mod+,     move_tab_backward
map kitty_mod+alt+t set_tab_title

# You can also create shortcuts to go to specific tabs, with 1 being
# the first tab::

#     map ctrl+alt+1 goto_tab 1
#     map ctrl+alt+2 goto_tab 2

# Just as with new_window above, you can also pass the name of
# arbitrary commands to run when using new_tab and use
# new_tab_with_cwd.
# }}}

# Layout management {{{

map kitty_mod+l next_layout

# You can also create shortcuts to switch to specific layouts::

#     map ctrl+alt+t goto_layout tall
#     map ctrl+alt+s goto_layout stack
# }}}

# Font sizes {{{

# You can change the font size for all top-level kitty windows at a
# time or only the current one.

map kitty_mod+equal     change_font_size all +2.0
map kitty_mod+minus     change_font_size all -2.0
map kitty_mod+backspace change_font_size all 0

# To setup shortcuts for specific font sizes::

#     map kitty_mod+f6 change_font_size all 10.0

# To setup shortcuts to change only the current window's font size::

#     map kitty_mod+f6 change_font_size current 10.0
# }}}

# Select and act on visible text {{{

# Use the hints kitten to select text and either pass it to an
# external program or insert it into the terminal or copy it to the
# clipboard.

map kitty_mod+e kitten hints

# Open a currently visible URL using the keyboard. The program used
# to open the URL is specified in open_url_with.

map kitty_mod+p>f kitten hints --type path --program -

# Select a path/filename and insert it into the terminal. Useful, for
# instance to run git commands on a filename output from a previous
# git command.

map kitty_mod+p>shift+f kitten hints --type path

# Select a path/filename and open it with the default open program.

map kitty_mod+p>l kitten hints --type line --program -

# Select a line of text and insert it into the terminal. Use for the
# output of things like: ls -1

map kitty_mod+p>w kitten hints --type word --program -

# Select words and insert into terminal.

map kitty_mod+p>h kitten hints --type hash --program -

# Select something that looks like a hash and insert it into the
# terminal. Useful with git, which uses sha1 hashes to identify
# commits


# The hints kitten has many more modes of operation that you can map
# to different shortcuts. For a full description see kittens/hints.
# }}}

# Miscellaneous {{{

map kitty_mod+enter    toggle_fullscreen
map kitty_mod+u      input_unicode_character
map kitty_mod+f2     edit_config_file
map kitty_mod+escape kitty_shell window

# Open the kitty shell in a new window/tab/overlay/os_window to
# control kitty using commands.

map kitty_mod+a>m set_background_opacity +0.1
map kitty_mod+a>l set_background_opacity -0.1
map kitty_mod+a>1 set_background_opacity 1
map kitty_mod+a>d set_background_opacity default

# You can tell kitty to send arbitrary (UTF-8) encoded text to the
# client program when pressing specified shortcut keys. For example::

#     map ctrl+alt+a send_text all Special text

# This will send "Special text" when you press the ctrl+alt+a key
# combination.  The text to be sent is a python string literal so you
# can use escapes like \x1b to send control codes or \u21fb to send
# unicode characters (or you can just input the unicode characters
# directly as UTF-8 text). The first argument to send_text is the
# keyboard modes in which to activate the shortcut. The possible
# values are normal or application or kitty or a comma separated
# combination of them.  The special keyword all means all modes. The
# modes normal and application refer to the DECCKM cursor key mode
# for terminals, and kitty refers to the special kitty extended
# keyboard protocol.

# Another example, that outputs a word and then moves the cursor to
# the start of the line (same as pressing the Home key)::

#     map ctrl+alt+a send_text normal Word\x1b[H
#     map ctrl+alt+a send_text application Word\x1bOH
